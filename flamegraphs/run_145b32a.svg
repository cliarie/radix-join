<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2118" onload="init(evt)" viewBox="0 0 1200 2118" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2118.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2101" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2101" > </text>
<g id="frames">
<g >
<title>duckdb_fsst_decompress (555,555,550 samples, 0.02%)</title><rect x="1111.3" y="2037" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1114.30" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="517" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="527.5" ></text>
</g>
<g >
<title>[unknown] (747,474,740 samples, 0.03%)</title><rect x="179.7" y="197" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="207.5" ></text>
</g>
<g >
<title>duckdb::CompressedStringScanState::FetchStringFromDict (323,232,320 samples, 0.01%)</title><rect x="1105.1" y="2037" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1108.07" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (797,979,790 samples, 0.03%)</title><rect x="179.7" y="1525" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; const*, std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; &gt;, std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;*&gt; (262,626,260 samples, 0.01%)</title><rect x="261.8" y="2021" width="0.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="264.76" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (1,636,363,620 samples, 0.06%)</title><rect x="183.0" y="1973" width="0.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="186.03" y="1983.5" ></text>
</g>
<g >
<title>run (2,898,989,870 samples, 0.10%)</title><rect x="253.4" y="2021" width="1.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="256.42" y="2031.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::~DuckTransaction (353,535,350 samples, 0.01%)</title><rect x="234.0" y="2021" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="237.03" y="2031.5" ></text>
</g>
<g >
<title>_int_free (272,727,270 samples, 0.01%)</title><rect x="180.2" y="1909" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="183.23" y="1919.5" ></text>
</g>
<g >
<title>re2::RE2::FullMatchN (2,010,100,990 samples, 0.07%)</title><rect x="1112.7" y="2037" width="0.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1115.73" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="677" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="687.5" ></text>
</g>
<g >
<title>[unknown] (4,606,060,560 samples, 0.17%)</title><rect x="235.0" y="2005" width="1.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="237.99" y="2015.5" ></text>
</g>
<g >
<title>_int_malloc (535,353,530 samples, 0.02%)</title><rect x="209.8" y="1957" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="212.75" y="1967.5" ></text>
</g>
<g >
<title>_int_malloc (3,111,111,080 samples, 0.11%)</title><rect x="212.1" y="1957" width="1.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="215.11" y="1967.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (1,656,565,640 samples, 0.06%)</title><rect x="286.9" y="1973" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="289.89" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (929,292,920 samples, 0.03%)</title><rect x="179.7" y="1765" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1775.5" ></text>
</g>
<g >
<title>duckdb_fsst_decompress (2,474,747,450 samples, 0.09%)</title><rect x="245.7" y="2021" width="1.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="248.72" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (555,555,550 samples, 0.02%)</title><rect x="237.1" y="2005" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="240.11" y="2015.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;duckdb::MetricsType, true, true&gt;, bool&gt; std::_Hashtable&lt;duckdb::MetricsType, duckdb::MetricsType, std::allocator&lt;duckdb::MetricsType&gt;, std::__detail::_Identity, std::equal_to&lt;duckdb::MetricsType&gt;, duckdb::MetricsTypeHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique&lt;duckdb::MetricsType const&amp;, duckdb::MetricsType const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;duckdb::MetricsType, true&gt; &gt; &gt; &gt; (333,333,330 samples, 0.01%)</title><rect x="1169.6" y="2037" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1172.60" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="325" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="335.5" ></text>
</g>
<g >
<title>_int_free (696,969,690 samples, 0.03%)</title><rect x="201.0" y="1973" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="203.99" y="1983.5" ></text>
</g>
<g >
<title>operator new (484,848,480 samples, 0.02%)</title><rect x="184.1" y="1973" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="187.08" y="1983.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (313,131,310 samples, 0.01%)</title><rect x="201.2" y="1925" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="204.15" y="1935.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (252,525,250 samples, 0.01%)</title><rect x="288.4" y="2021" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="291.41" y="2031.5" ></text>
</g>
<g >
<title>alloc_perturb (242,424,240 samples, 0.01%)</title><rect x="213.4" y="1957" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="216.43" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (959,595,950 samples, 0.03%)</title><rect x="179.7" y="1781" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1791.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (474,747,470 samples, 0.02%)</title><rect x="160.8" y="1989" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="163.80" y="1999.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (12,707,070,580 samples, 0.46%)</title><rect x="123.8" y="1973" width="5.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="126.75" y="1983.5" ></text>
</g>
<g >
<title>operator new (656,565,650 samples, 0.02%)</title><rect x="232.7" y="2005" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="235.68" y="2015.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (1,656,565,640 samples, 0.06%)</title><rect x="286.9" y="1989" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="289.89" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (777,777,770 samples, 0.03%)</title><rect x="179.7" y="1397" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1407.5" ></text>
</g>
<g >
<title>alloc_perturb (303,030,300 samples, 0.01%)</title><rect x="27.4" y="1989" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="30.43" y="1999.5" ></text>
</g>
<g >
<title>Contest::execute_scan[abi:cxx11] (80,888,888,080 samples, 2.91%)</title><rect x="28.4" y="2021" width="34.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="31.36" y="2031.5" >Co..</text>
</g>
<g >
<title>operator new (272,727,270 samples, 0.01%)</title><rect x="161.0" y="1989" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="164.00" y="1999.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (21,262,626,050 samples, 0.76%)</title><rect x="50.8" y="1941" width="9.0" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="53.80" y="1951.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (5,101,010,050 samples, 0.18%)</title><rect x="59.9" y="1973" width="2.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="62.95" y="1983.5" ></text>
</g>
<g >
<title>malloc_consolidate (3,676,767,640 samples, 0.13%)</title><rect x="218.3" y="1941" width="1.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="221.34" y="1951.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (1,606,060,590 samples, 0.06%)</title><rect x="216.2" y="1973" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="219.18" y="1983.5" ></text>
</g>
<g >
<title>alloc_perturb (414,141,410 samples, 0.01%)</title><rect x="153.0" y="1973" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="155.96" y="1983.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (2,797,979,770 samples, 0.10%)</title><rect x="253.4" y="1973" width="1.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="256.44" y="1983.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (353,535,350 samples, 0.01%)</title><rect x="286.6" y="1973" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="289.59" y="1983.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (252,525,250 samples, 0.01%)</title><rect x="180.2" y="1893" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="183.24" y="1903.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (414,141,410 samples, 0.01%)</title><rect x="1169.4" y="2037" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1172.36" y="2047.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (35,828,282,470 samples, 1.29%)</title><rect x="271.5" y="2005" width="15.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="274.55" y="2015.5" ></text>
</g>
<g >
<title>duckdb::StringHeap::EmptyString (2,171,717,150 samples, 0.08%)</title><rect x="241.0" y="2021" width="1.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="244.04" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="1077" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1087.5" ></text>
</g>
<g >
<title>duckdb::JoinHashTable::ScanStructure::AdvancePointers (555,555,550 samples, 0.02%)</title><rect x="1107.5" y="2037" width="0.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1110.48" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (878,787,870 samples, 0.03%)</title><rect x="179.7" y="1733" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (545,454,540 samples, 0.02%)</title><rect x="62.7" y="1989" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="65.70" y="1999.5" ></text>
</g>
<g >
<title>operator new (959,595,950 samples, 0.03%)</title><rect x="1112.1" y="2037" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1115.09" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="789" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="799.5" ></text>
</g>
<g >
<title>[unknown] (797,979,790 samples, 0.03%)</title><rect x="179.7" y="1509" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="757" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="767.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (525,252,520 samples, 0.02%)</title><rect x="197.4" y="1925" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="200.42" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1,050,505,040 samples, 0.04%)</title><rect x="209.2" y="2005" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="212.20" y="2015.5" ></text>
</g>
<g >
<title>start_thread (1,909,484,829,390 samples, 68.65%)</title><rect x="294.6" y="2021" width="810.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="297.64" y="2031.5" >start_thread</text>
</g>
<g >
<title>malloc_consolidate (17,636,363,460 samples, 0.63%)</title><rect x="279.0" y="1957" width="7.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="282.01" y="1967.5" ></text>
</g>
<g >
<title>operator new (7,323,232,250 samples, 0.26%)</title><rect x="210.4" y="1989" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="213.43" y="1999.5" ></text>
</g>
<g >
<title>run (414,141,410 samples, 0.01%)</title><rect x="184.4" y="1989" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="187.42" y="1999.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (44,252,524,810 samples, 1.59%)</title><rect x="105.0" y="1973" width="18.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="107.98" y="1983.5" ></text>
</g>
<g >
<title>unsigned long from_inner_to_column&lt;int&gt; (11,252,525,140 samples, 0.40%)</title><rect x="1177.5" y="2037" width="4.8" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1180.50" y="2047.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (1,222,222,210 samples, 0.04%)</title><rect x="197.1" y="1957" width="0.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="200.13" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (515,151,510 samples, 0.02%)</title><rect x="244.9" y="2005" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="247.86" y="2015.5" ></text>
</g>
<g >
<title>malloc_consolidate (3,858,585,820 samples, 0.14%)</title><rect x="242.5" y="1989" width="1.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="245.49" y="1999.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (3,737,373,700 samples, 0.13%)</title><rect x="218.3" y="1957" width="1.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="221.34" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (808,080,800 samples, 0.03%)</title><rect x="179.7" y="1573" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (4,161,616,120 samples, 0.15%)</title><rect x="187.4" y="1989" width="1.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="190.36" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (505,050,500 samples, 0.02%)</title><rect x="62.7" y="1973" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="65.72" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;::reserve (6,909,090,840 samples, 0.25%)</title><rect x="261.9" y="2021" width="2.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="264.87" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="549" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="559.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (414,141,410 samples, 0.01%)</title><rect x="184.4" y="1973" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="187.42" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="309" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="319.5" ></text>
</g>
<g >
<title>unsigned long from_inner_to_column&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (8,777,777,690 samples, 0.32%)</title><rect x="1182.3" y="2037" width="3.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1185.27" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="261" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="271.5" ></text>
</g>
<g >
<title>operator new (333,333,330 samples, 0.01%)</title><rect x="1169.6" y="2021" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1172.60" y="2031.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::Analyze (242,424,240 samples, 0.01%)</title><rect x="198.8" y="2005" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="201.77" y="2015.5" ></text>
</g>
<g >
<title>operator new (1,111,111,100 samples, 0.04%)</title><rect x="199.7" y="2005" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="202.66" y="2015.5" ></text>
</g>
<g >
<title>_int_free (838,383,830 samples, 0.03%)</title><rect x="37.3" y="2005" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="40.33" y="2015.5" ></text>
</g>
<g >
<title>malloc_consolidate (2,737,373,710 samples, 0.10%)</title><rect x="253.4" y="1957" width="1.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="256.44" y="1967.5" ></text>
</g>
<g >
<title>__memmove_avx512_unaligned_erms (3,999,999,960 samples, 0.14%)</title><rect x="180.6" y="1973" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="183.59" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1125" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (808,080,800 samples, 0.03%)</title><rect x="179.7" y="1653" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1663.5" ></text>
</g>
<g >
<title>malloc (535,353,530 samples, 0.02%)</title><rect x="209.8" y="1973" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="212.75" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="485" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="495.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,272,727,250 samples, 0.08%)</title><rect x="188.1" y="1973" width="0.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="191.08" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (1,141,414,130 samples, 0.04%)</title><rect x="179.7" y="1877" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.65" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="389" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="399.5" ></text>
</g>
<g >
<title>_int_free (2,878,787,850 samples, 0.10%)</title><rect x="253.4" y="1989" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="256.43" y="1999.5" ></text>
</g>
<g >
<title>int duckdb::DeltaDecode&lt;int&gt; (474,747,470 samples, 0.02%)</title><rect x="248.0" y="2021" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="250.98" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="933" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="943.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="917" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="927.5" ></text>
</g>
<g >
<title>[unknown] (747,474,740 samples, 0.03%)</title><rect x="179.7" y="181" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (474,747,470 samples, 0.02%)</title><rect x="178.8" y="1941" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="181.79" y="1951.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; (3,111,111,080 samples, 0.11%)</title><rect x="288.5" y="2021" width="1.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="291.52" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;::reserve (353,535,350 samples, 0.01%)</title><rect x="182.9" y="1973" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="185.88" y="1983.5" ></text>
</g>
<g >
<title>void std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_realloc_insert&lt;unsigned int const&amp;&gt; (474,747,470 samples, 0.02%)</title><rect x="289.8" y="2021" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="292.84" y="2031.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (13,323,232,190 samples, 0.48%)</title><rect x="254.7" y="2021" width="5.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="257.65" y="2031.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (1,868,686,850 samples, 0.07%)</title><rect x="230.3" y="1973" width="0.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="233.29" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="661" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="671.5" ></text>
</g>
<g >
<title>duckdb::DeltaDecodeIndices (373,737,370 samples, 0.01%)</title><rect x="233.9" y="2021" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="236.86" y="2031.5" ></text>
</g>
<g >
<title>void duckdb::RLEScanPartialInternal&lt;int, true&gt; (323,232,320 samples, 0.01%)</title><rect x="237.5" y="1989" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="240.45" y="1999.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (129,030,301,740 samples, 4.64%)</title><rect x="1114.5" y="2037" width="54.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1117.50" y="2047.5" >std::..</text>
</g>
<g >
<title>malloc_consolidate (414,141,410 samples, 0.01%)</title><rect x="184.4" y="1925" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="187.42" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1189" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1199.5" ></text>
</g>
<g >
<title>operator new (252,525,250 samples, 0.01%)</title><rect x="294.5" y="1989" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="297.54" y="1999.5" ></text>
</g>
<g >
<title>_int_free (414,141,410 samples, 0.01%)</title><rect x="184.4" y="1957" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="187.42" y="1967.5" ></text>
</g>
<g >
<title>malloc@plt (484,848,480 samples, 0.02%)</title><rect x="165.4" y="1989" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="168.38" y="1999.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (1,111,111,100 samples, 0.04%)</title><rect x="254.1" y="1941" width="0.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="257.13" y="1951.5" ></text>
</g>
<g >
<title>TableParser&lt;Table::from_csv (2,515,151,490 samples, 0.09%)</title><rect x="153.1" y="2021" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="156.14" y="2031.5" ></text>
</g>
<g >
<title>re2::DFA::AnalyzeSearch (484,848,480 samples, 0.02%)</title><rect x="251.3" y="2021" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="254.30" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (737,373,730 samples, 0.03%)</title><rect x="179.7" y="101" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.68" y="111.5" ></text>
</g>
<g >
<title>[unknown] (747,474,740 samples, 0.03%)</title><rect x="179.7" y="165" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="175.5" ></text>
</g>
<g >
<title>[unknown] (919,191,910 samples, 0.03%)</title><rect x="179.7" y="1749" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1759.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (23,909,090,670 samples, 0.86%)</title><rect x="113.4" y="1941" width="10.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="116.42" y="1951.5" ></text>
</g>
<g >
<title>operator new (17,606,060,430 samples, 0.63%)</title><rect x="165.6" y="1989" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="168.59" y="1999.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (18,111,110,930 samples, 0.65%)</title><rect x="201.3" y="2005" width="7.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="204.29" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="277" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="287.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1,424,242,410 samples, 0.05%)</title><rect x="229.3" y="2021" width="0.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="232.31" y="2031.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (494,949,490 samples, 0.02%)</title><rect x="230.9" y="1941" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="233.86" y="1951.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (1,232,323,220 samples, 0.04%)</title><rect x="219.4" y="1925" width="0.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="222.37" y="1935.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,242,424,220 samples, 0.08%)</title><rect x="196.7" y="1989" width="1.0" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="199.71" y="1999.5" ></text>
</g>
<g >
<title>void duckdb::FSSTStorage::StringScanPartial&lt;true&gt; (2,959,595,930 samples, 0.11%)</title><rect x="1186.3" y="2037" width="1.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1189.30" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (777,777,770 samples, 0.03%)</title><rect x="179.7" y="1365" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (999,999,990 samples, 0.04%)</title><rect x="179.7" y="1813" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (747,474,740 samples, 0.03%)</title><rect x="179.7" y="117" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="127.5" ></text>
</g>
<g >
<title>malloc (474,747,470 samples, 0.02%)</title><rect x="179.4" y="1941" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="182.36" y="1951.5" ></text>
</g>
<g >
<title>compare (2,757,575,730 samples, 0.10%)</title><rect x="229.9" y="2021" width="1.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="232.91" y="2031.5" ></text>
</g>
<g >
<title>_int_malloc (272,727,270 samples, 0.01%)</title><rect x="1169.6" y="1989" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1172.63" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="453" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="463.5" ></text>
</g>
<g >
<title>_int_free (292,929,290 samples, 0.01%)</title><rect x="271.4" y="2005" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="274.42" y="2015.5" ></text>
</g>
<g >
<title>operator new (1,464,646,450 samples, 0.05%)</title><rect x="178.4" y="1973" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="181.39" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="645" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="655.5" ></text>
</g>
<g >
<title>operator new (292,929,290 samples, 0.01%)</title><rect x="182.9" y="1957" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="185.91" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="437" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="447.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (272,727,270 samples, 0.01%)</title><rect x="1189.9" y="2037" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1192.86" y="2047.5" ></text>
</g>
<g >
<title>_int_malloc (454,545,450 samples, 0.02%)</title><rect x="184.1" y="1941" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="187.09" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (777,777,770 samples, 0.03%)</title><rect x="179.7" y="1317" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1327.5" ></text>
</g>
<g >
<title>void duckdb::BitpackingScanPartial&lt;int, int, unsigned int&gt; (757,575,750 samples, 0.03%)</title><rect x="287.7" y="2021" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="290.67" y="2031.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (414,141,410 samples, 0.01%)</title><rect x="209.0" y="2005" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="212.01" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="1093" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1103.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (550,919,186,410 samples, 19.81%)</title><rect x="596.4" y="1989" width="233.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="599.36" y="1999.5" >[libgomp.so.1.0.0]</text>
</g>
<g >
<title>duckdb::CollectionScanState::Scan (343,434,340 samples, 0.01%)</title><rect x="234.0" y="1989" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="237.03" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (353,535,350 samples, 0.01%)</title><rect x="234.0" y="2005" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="237.03" y="2015.5" ></text>
</g>
<g >
<title>malloc (252,525,250 samples, 0.01%)</title><rect x="294.5" y="1973" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="297.54" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="1029" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1039.5" ></text>
</g>
<g >
<title>[unknown] (808,080,800 samples, 0.03%)</title><rect x="179.7" y="1637" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1647.5" ></text>
</g>
<g >
<title>malloc@plt (343,434,340 samples, 0.01%)</title><rect x="129.7" y="2005" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="132.71" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (828,282,820 samples, 0.03%)</title><rect x="179.7" y="1685" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1695.5" ></text>
</g>
<g >
<title>duckdb::FindStrInStr (626,262,620 samples, 0.02%)</title><rect x="234.4" y="2021" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="237.43" y="2031.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (454,545,450 samples, 0.02%)</title><rect x="123.6" y="1957" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="126.56" y="1967.5" ></text>
</g>
<g >
<title>alloc_perturb (323,232,320 samples, 0.01%)</title><rect x="172.9" y="1957" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="175.92" y="1967.5" ></text>
</g>
<g >
<title>_int_free (1,626,262,610 samples, 0.06%)</title><rect x="89.9" y="2005" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="92.88" y="2015.5" ></text>
</g>
<g >
<title>_int_free (313,131,310 samples, 0.01%)</title><rect x="154.2" y="1973" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="157.23" y="1983.5" ></text>
</g>
<g >
<title>__memset_avx512_unaligned_erms (252,525,250 samples, 0.01%)</title><rect x="238.3" y="2005" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="241.31" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (777,777,770 samples, 0.03%)</title><rect x="179.7" y="1349" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1359.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (777,777,770 samples, 0.03%)</title><rect x="183.4" y="1957" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="186.35" y="1967.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (1,353,535,340 samples, 0.05%)</title><rect x="220.0" y="1989" width="0.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="223.03" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (797,979,790 samples, 0.03%)</title><rect x="179.7" y="1477" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1487.5" ></text>
</g>
<g >
<title>unsigned long duckdb::TemplatedMatch&lt;true, int, duckdb::Equals&gt; (505,050,500 samples, 0.02%)</title><rect x="1177.2" y="2037" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1180.22" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;::reserve (2,868,686,840 samples, 0.10%)</title><rect x="186.1" y="1989" width="1.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="189.14" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="997" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1007.5" ></text>
</g>
<g >
<title>Comparison::like_match (262,626,260 samples, 0.01%)</title><rect x="173.3" y="1989" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="176.31" y="1999.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (414,141,410 samples, 0.01%)</title><rect x="184.4" y="1941" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="187.42" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="725" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="735.5" ></text>
</g>
<g >
<title>_int_malloc (969,696,960 samples, 0.03%)</title><rect x="186.9" y="1941" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="189.94" y="1951.5" ></text>
</g>
<g >
<title>__malloc_trim (4,373,737,330 samples, 0.16%)</title><rect x="242.3" y="2005" width="1.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="245.28" y="2015.5" ></text>
</g>
<g >
<title>re2::RE2::Match (2,111,111,090 samples, 0.08%)</title><rect x="1113.6" y="2037" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1116.59" y="2047.5" ></text>
</g>
<g >
<title>malloc (17,252,525,080 samples, 0.62%)</title><rect x="165.7" y="1973" width="7.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="168.74" y="1983.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (5,373,737,320 samples, 0.19%)</title><rect x="290.0" y="2037" width="2.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="293.04" y="2047.5" ></text>
</g>
<g >
<title>_int_malloc (252,525,250 samples, 0.01%)</title><rect x="294.5" y="1957" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="297.54" y="1967.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (3,242,424,210 samples, 0.12%)</title><rect x="270.0" y="2005" width="1.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="273.05" y="2015.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (292,929,290 samples, 0.01%)</title><rect x="59.8" y="1957" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="62.82" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (777,777,770 samples, 0.03%)</title><rect x="179.7" y="1333" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1343.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringScanPartial (292,929,290 samples, 0.01%)</title><rect x="244.4" y="2021" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="247.44" y="2031.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (1,606,060,590 samples, 0.06%)</title><rect x="216.2" y="1989" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="219.18" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (38,404,040,020 samples, 1.38%)</title><rect x="173.3" y="2005" width="16.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="176.31" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (797,979,790 samples, 0.03%)</title><rect x="179.7" y="1541" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1551.5" ></text>
</g>
<g >
<title>malloc_consolidate (35,222,221,870 samples, 1.27%)</title><rect x="44.9" y="1957" width="14.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="47.88" y="1967.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (252,525,250 samples, 0.01%)</title><rect x="294.5" y="2037" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="297.54" y="2047.5" ></text>
</g>
<g >
<title>malloc_consolidate (515,151,510 samples, 0.02%)</title><rect x="209.8" y="1941" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="212.75" y="1951.5" ></text>
</g>
<g >
<title>re2::Prog::GetDFA (333,333,330 samples, 0.01%)</title><rect x="251.5" y="2021" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="254.54" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="965" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="975.5" ></text>
</g>
<g >
<title>operator delete (353,535,350 samples, 0.01%)</title><rect x="199.5" y="2005" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="202.51" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (1,676,767,660 samples, 0.06%)</title><rect x="179.6" y="1957" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.64" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="821" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="831.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,757,575,730 samples, 0.10%)</title><rect x="229.9" y="2005" width="1.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="232.91" y="2015.5" ></text>
</g>
<g >
<title>operator new (252,525,250 samples, 0.01%)</title><rect x="244.7" y="2005" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="247.68" y="2015.5" ></text>
</g>
<g >
<title>duckdb::PhysicalHashJoin::ExecuteInternal (4,565,656,520 samples, 0.16%)</title><rect x="235.0" y="1989" width="1.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="238.00" y="1999.5" ></text>
</g>
<g >
<title>malloc_consolidate (40,898,989,490 samples, 1.47%)</title><rect x="106.2" y="1957" width="17.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="109.21" y="1967.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (647,121,205,650 samples, 23.26%)</title><rect x="830.2" y="1989" width="274.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="833.15" y="1999.5" >[libgomp.so.1.0.0]</text>
</g>
<g >
<title>Contest::execute (353,535,350 samples, 0.01%)</title><rect x="154.2" y="2005" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="157.22" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1205" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1215.5" ></text>
</g>
<g >
<title>re2::Prog::SearchDFA (272,727,270 samples, 0.01%)</title><rect x="1112.6" y="2037" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1115.58" y="2047.5" ></text>
</g>
<g >
<title>duckdb::JoinHashTable::PrepareKeys (575,757,570 samples, 0.02%)</title><rect x="1107.2" y="2037" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1110.24" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1141" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="421" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="431.5" ></text>
</g>
<g >
<title>[unknown] (4,181,818,140 samples, 0.15%)</title><rect x="238.4" y="2005" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="241.42" y="2015.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::~PendingQueryResult (555,555,550 samples, 0.02%)</title><rect x="237.1" y="2021" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="240.11" y="2031.5" ></text>
</g>
<g >
<title>operator new (6,020,201,960 samples, 0.22%)</title><rect x="262.2" y="2005" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="265.25" y="2015.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; (1,070,707,060 samples, 0.04%)</title><rect x="189.1" y="1989" width="0.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="192.13" y="1999.5" ></text>
</g>
<g >
<title>all (2,781,626,234,810 samples, 100%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" ></text>
</g>
<g >
<title>[unknown] (777,777,770 samples, 0.03%)</title><rect x="179.7" y="1381" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1391.5" ></text>
</g>
<g >
<title>_int_free (1,010,101,000 samples, 0.04%)</title><rect x="164.8" y="1973" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="167.84" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1221" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1231.5" ></text>
</g>
<g >
<title>Table::from_columnar (28,141,413,860 samples, 1.01%)</title><rect x="161.1" y="2005" width="12.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="164.12" y="2015.5" ></text>
</g>
<g >
<title>malloc (333,333,330 samples, 0.01%)</title><rect x="1169.6" y="2005" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1172.60" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="229" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="239.5" ></text>
</g>
<g >
<title>unsigned long duckdb::BinaryExecutor::SelectGeneric&lt;duckdb::string_t, duckdb::string_t, duckdb::Equals&gt; (636,363,630 samples, 0.02%)</title><rect x="1176.9" y="2037" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1179.93" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="901" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="911.5" ></text>
</g>
<g >
<title>malloc (292,929,290 samples, 0.01%)</title><rect x="182.9" y="1941" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="185.91" y="1951.5" ></text>
</g>
<g >
<title>_int_free (2,171,717,150 samples, 0.08%)</title><rect x="188.1" y="1957" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="191.12" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (1,272,727,260 samples, 0.05%)</title><rect x="179.6" y="1925" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.64" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;::reserve (8,131,313,050 samples, 0.29%)</title><rect x="210.1" y="2005" width="3.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="213.09" y="2015.5" ></text>
</g>
<g >
<title>duckdb_je_malloc_mutex_lock_slow (424,242,420 samples, 0.02%)</title><rect x="247.2" y="2021" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="250.16" y="2031.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (647,060,599,590 samples, 23.26%)</title><rect x="830.2" y="1973" width="274.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="833.18" y="1983.5" >[libgomp.so.1.0.0]</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (3,414,141,380 samples, 0.12%)</title><rect x="184.6" y="1989" width="1.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="187.60" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (808,080,800 samples, 0.03%)</title><rect x="179.7" y="1605" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1615.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::CreateStandardVector (484,848,480 samples, 0.02%)</title><rect x="184.1" y="1989" width="0.2" height="15.0" fill="rgb(235,142,33)" rx="2" ry="2" />
<text  x="187.08" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="805" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="815.5" ></text>
</g>
<g >
<title>duckdb::HashBytes (2,232,323,210 samples, 0.08%)</title><rect x="1106.2" y="2037" width="0.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1109.19" y="2047.5" ></text>
</g>
<g >
<title>_int_free (55,484,847,930 samples, 1.99%)</title><rect x="38.6" y="1989" width="23.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="41.59" y="1999.5" >_..</text>
</g>
<g >
<title>[unknown] (1,181,818,170 samples, 0.04%)</title><rect x="179.6" y="1893" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.64" y="1903.5" ></text>
</g>
<g >
<title>__memset_avx512_unaligned_erms (686,868,680 samples, 0.02%)</title><rect x="294.2" y="2037" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="297.16" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (11,131,313,020 samples, 0.40%)</title><rect x="179.0" y="1989" width="4.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.01" y="1999.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::~AttachedDatabase (505,050,500 samples, 0.02%)</title><rect x="233.2" y="2021" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="236.20" y="2031.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::~StandardBufferManager (4,181,818,140 samples, 0.15%)</title><rect x="238.4" y="2021" width="1.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="241.42" y="2031.5" ></text>
</g>
<g >
<title>Comparison::like_match (4,979,797,930 samples, 0.18%)</title><rect x="11.9" y="2037" width="2.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="14.92" y="2047.5" ></text>
</g>
<g >
<title>operator new (848,484,840 samples, 0.03%)</title><rect x="62.3" y="2005" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="65.32" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (363,636,360 samples, 0.01%)</title><rect x="261.3" y="2005" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="264.33" y="2015.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (2,282,828,260 samples, 0.08%)</title><rect x="128.2" y="1957" width="0.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="131.18" y="1967.5" ></text>
</g>
<g >
<title>malloc (1,939,393,920 samples, 0.07%)</title><rect x="186.5" y="1957" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="189.54" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (1,060,606,050 samples, 0.04%)</title><rect x="179.7" y="1845" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.65" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (656,565,650 samples, 0.02%)</title><rect x="179.7" y="69" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.68" y="79.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (17,929,292,750 samples, 0.64%)</title><rect x="279.0" y="1973" width="7.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="281.98" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="869" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="879.5" ></text>
</g>
<g >
<title>TableParser&lt;Table::from_csv (575,757,570 samples, 0.02%)</title><rect x="173.1" y="2005" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="176.06" y="2015.5" ></text>
</g>
<g >
<title>malloc_consolidate (454,545,450 samples, 0.02%)</title><rect x="183.5" y="1909" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="186.48" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="773" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="783.5" ></text>
</g>
<g >
<title>re2::Prog::SearchDFA (3,979,797,940 samples, 0.14%)</title><rect x="251.7" y="2021" width="1.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="254.68" y="2031.5" ></text>
</g>
<g >
<title>duckdb::StringVector::AddStringOrBlob (3,080,808,050 samples, 0.11%)</title><rect x="1108.4" y="2037" width="1.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1111.38" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (797,979,790 samples, 0.03%)</title><rect x="179.7" y="1445" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1455.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (303,030,300 samples, 0.01%)</title><rect x="180.2" y="1941" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="183.22" y="1951.5" ></text>
</g>
<g >
<title>malloc_consolidate (1,212,121,200 samples, 0.04%)</title><rect x="197.1" y="1941" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="200.13" y="1951.5" ></text>
</g>
<g >
<title>operator new (54,878,787,330 samples, 1.97%)</title><rect x="129.9" y="2005" width="23.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="132.86" y="2015.5" >o..</text>
</g>
<g >
<title>operator new (1,666,666,650 samples, 0.06%)</title><rect x="250.5" y="2021" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="253.49" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (979,797,970 samples, 0.04%)</title><rect x="179.7" y="1797" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1807.5" ></text>
</g>
<g >
<title>malloc (323,232,320 samples, 0.01%)</title><rect x="286.8" y="1989" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="289.76" y="1999.5" ></text>
</g>
<g >
<title>Table::from_columnar (10,474,747,370 samples, 0.38%)</title><rect x="174.6" y="1989" width="4.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="177.56" y="1999.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (37,272,726,900 samples, 1.34%)</title><rect x="44.1" y="1973" width="15.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="47.13" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (747,474,740 samples, 0.03%)</title><rect x="179.7" y="213" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="223.5" ></text>
</g>
<g >
<title>_int_free (737,373,730 samples, 0.03%)</title><rect x="183.4" y="1941" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="186.37" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (545,454,540 samples, 0.02%)</title><rect x="62.7" y="2005" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="65.70" y="2015.5" ></text>
</g>
<g >
<title>malloc (6,858,585,790 samples, 0.25%)</title><rect x="210.6" y="1973" width="2.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="213.63" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="981" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="991.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (262,626,260 samples, 0.01%)</title><rect x="178.2" y="1973" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="181.25" y="1983.5" ></text>
</g>
<g >
<title>void duckdb::BinaryExecutor::ExecuteGeneric&lt;duckdb::string_t, duckdb::string_t, bool, duckdb::BinaryStandardOperatorWrapper, duckdb::ContainsOperator, bool&gt; (333,333,330 samples, 0.01%)</title><rect x="1186.1" y="2037" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1189.09" y="2047.5" ></text>
</g>
<g >
<title>Contest::execute_scan[abi:cxx11] (15,919,191,760 samples, 0.57%)</title><rect x="154.4" y="2005" width="6.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="157.37" y="2015.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;void&gt;,  (363,636,360 samples, 0.01%)</title><rect x="261.3" y="2021" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="264.33" y="2031.5" ></text>
</g>
<g >
<title>malloc (404,040,400 samples, 0.01%)</title><rect x="289.9" y="1989" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="292.87" y="1999.5" ></text>
</g>
<g >
<title>duckdb::StringHeap::AddBlob (1,919,191,900 samples, 0.07%)</title><rect x="240.2" y="2021" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="243.22" y="2031.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (242,424,240 samples, 0.01%)</title><rect x="1169.2" y="2037" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1172.24" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="357" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="367.5" ></text>
</g>
<g >
<title>Table::from_columnar (212,646,462,520 samples, 7.64%)</title><rect x="62.9" y="2021" width="90.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="65.93" y="2031.5" >Table::fro..</text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1109" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1119.5" ></text>
</g>
<g >
<title>duckdb::JoinHashTable::Probe (4,484,848,440 samples, 0.16%)</title><rect x="235.0" y="1973" width="1.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="238.03" y="1983.5" ></text>
</g>
<g >
<title>__memmove_avx512_unaligned_erms (5,010,100,960 samples, 0.18%)</title><rect x="191.4" y="2005" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="194.45" y="2015.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (828,282,820 samples, 0.03%)</title><rect x="182.5" y="1973" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="185.50" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (617,767,670,590 samples, 22.21%)</title><rect x="28.0" y="2037" width="262.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="30.98" y="2047.5" >[unknown]</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (91,818,180,900 samples, 3.30%)</title><rect x="90.6" y="2005" width="38.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="93.57" y="2015.5" >cfr..</text>
</g>
<g >
<title>absl::lts_20240722::Mutex::ReaderUnlock (727,272,720 samples, 0.03%)</title><rect x="223.4" y="2021" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="226.37" y="2031.5" ></text>
</g>
<g >
<title>void duckdb::TupleDataTemplatedGather&lt;duckdb::string_t&gt; (313,131,310 samples, 0.01%)</title><rect x="1189.3" y="2037" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1192.30" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="613" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="623.5" ></text>
</g>
<g >
<title>operator new (333,333,330 samples, 0.01%)</title><rect x="286.8" y="2005" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="289.75" y="2015.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::DefaultSelect (292,929,290 samples, 0.01%)</title><rect x="197.8" y="2005" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="200.82" y="2015.5" ></text>
</g>
<g >
<title>clone3 (1,909,484,829,390 samples, 68.65%)</title><rect x="294.6" y="2037" width="810.1" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="297.64" y="2047.5" >clone3</text>
</g>
<g >
<title>duckdb::RLEScanState&lt;int&gt;::~RLEScanState (1,585,858,570 samples, 0.06%)</title><rect x="237.5" y="2021" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="240.45" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="693" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="703.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::ExecuteForever (5,101,010,050 samples, 0.18%)</title><rect x="242.0" y="2021" width="2.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="245.01" y="2031.5" ></text>
</g>
<g >
<title>_int_free (444,444,440 samples, 0.02%)</title><rect x="28.2" y="1989" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="31.17" y="1999.5" ></text>
</g>
<g >
<title>run (2,781,626,234,810 samples, 100.00%)</title><rect x="10.0" y="2053" width="1180.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.00" y="2063.5" >run</text>
</g>
<g >
<title>_int_free (2,101,010,080 samples, 0.08%)</title><rect x="196.8" y="1973" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="199.76" y="1983.5" ></text>
</g>
<g >
<title>__memchr_evex (484,848,480 samples, 0.02%)</title><rect x="221.3" y="2021" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="224.33" y="2031.5" ></text>
</g>
<g >
<title>absl::lts_20240722::Mutex::ReaderLock (353,535,350 samples, 0.01%)</title><rect x="223.2" y="2021" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="226.22" y="2031.5" ></text>
</g>
<g >
<title>copy (4,424,242,380 samples, 0.16%)</title><rect x="231.1" y="2021" width="1.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="234.08" y="2031.5" ></text>
</g>
<g >
<title>operator new (2,010,100,990 samples, 0.07%)</title><rect x="186.5" y="1973" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="189.51" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="565" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="575.5" ></text>
</g>
<g >
<title>[unknown] (747,474,740 samples, 0.03%)</title><rect x="179.7" y="133" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="143.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="597" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="607.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (272,727,270 samples, 0.01%)</title><rect x="180.2" y="1925" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="183.23" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1237" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1247.5" ></text>
</g>
<g >
<title>duckdb_fastpforlib::internal::__fastunpack22 (515,151,510 samples, 0.02%)</title><rect x="245.5" y="2021" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="248.48" y="2031.5" ></text>
</g>
<g >
<title>duckdb::Checksum (313,131,310 samples, 0.01%)</title><rect x="1104.8" y="2037" width="0.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="1107.78" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (808,080,800 samples, 0.03%)</title><rect x="179.7" y="1589" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (1,212,121,200 samples, 0.04%)</title><rect x="179.6" y="1909" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.64" y="1919.5" ></text>
</g>
<g >
<title>bool std::__lexicographical_compare_impl&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; const*, std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; const*, __gnu_cxx::__ops::_Iter_less_iter&gt; (6,161,616,100 samples, 0.22%)</title><rect x="193.6" y="2005" width="2.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="196.59" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="533" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="543.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="581" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="591.5" ></text>
</g>
<g >
<title>run (696,969,690 samples, 0.03%)</title><rect x="201.0" y="2005" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="203.99" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (1,090,909,080 samples, 0.04%)</title><rect x="179.7" y="1861" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.65" y="1871.5" ></text>
</g>
<g >
<title>malloc_consolidate (696,969,690 samples, 0.03%)</title><rect x="201.0" y="1941" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="203.99" y="1951.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (58,050,504,470 samples, 2.09%)</title><rect x="37.7" y="2005" width="24.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="40.69" y="2015.5" >c..</text>
</g>
<g >
<title>malloc_consolidate (252,525,250 samples, 0.01%)</title><rect x="294.5" y="1941" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="297.54" y="1951.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (656,565,650 samples, 0.02%)</title><rect x="129.2" y="1989" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="132.24" y="1999.5" ></text>
</g>
<g >
<title>void duckdb::PartitionedTupleData::BuildPartitionSel&lt;true&gt; (454,545,450 samples, 0.02%)</title><rect x="288.0" y="2021" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="291.00" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="885" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="895.5" ></text>
</g>
<g >
<title>bool std::__lexicographical_compare_impl&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; const*, std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; const*, __gnu_cxx::__ops::_Iter_less_iter&gt; (393,939,390 samples, 0.01%)</title><rect x="229.1" y="2021" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="232.14" y="2031.5" ></text>
</g>
<g >
<title>_int_free (414,141,410 samples, 0.01%)</title><rect x="160.8" y="1973" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="163.83" y="1983.5" ></text>
</g>
<g >
<title>re2::RE2::DoMatch (979,797,970 samples, 0.04%)</title><rect x="1112.9" y="2021" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1115.92" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (158,191,917,610 samples, 5.69%)</title><rect x="154.2" y="2021" width="67.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="157.21" y="2031.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (828,282,820 samples, 0.03%)</title><rect x="179.7" y="1669" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1679.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (242,424,240 samples, 0.01%)</title><rect x="286.5" y="1957" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="289.49" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (1,030,303,020 samples, 0.04%)</title><rect x="179.7" y="1829" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.65" y="1839.5" ></text>
</g>
<g >
<title>free@plt (989,898,980 samples, 0.04%)</title><rect x="247.6" y="2021" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="250.56" y="2031.5" ></text>
</g>
<g >
<title>re2::RE2::Match (595,959,590 samples, 0.02%)</title><rect x="1113.3" y="2021" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1116.33" y="2031.5" ></text>
</g>
<g >
<title>malloc_consolidate (1,020,202,010 samples, 0.04%)</title><rect x="188.6" y="1925" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="191.60" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="293" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="303.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (515,151,510 samples, 0.02%)</title><rect x="244.9" y="2021" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="247.86" y="2031.5" ></text>
</g>
<g >
<title>_int_malloc (25,797,979,540 samples, 0.93%)</title><rect x="142.0" y="1973" width="11.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="145.02" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (535,353,530 samples, 0.02%)</title><rect x="209.8" y="2005" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="212.75" y="2015.5" ></text>
</g>
<g >
<title>duckdb::JoinHashTable::GetRowPointers (4,464,646,420 samples, 0.16%)</title><rect x="235.0" y="1957" width="1.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="238.03" y="1967.5" ></text>
</g>
<g >
<title>malloc (29,404,040,110 samples, 1.06%)</title><rect x="15.1" y="2005" width="12.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="18.09" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (4,161,616,120 samples, 0.15%)</title><rect x="238.4" y="1989" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="241.42" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (53,737,373,200 samples, 1.93%)</title><rect x="264.8" y="2021" width="22.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="267.80" y="2031.5" >s..</text>
</g>
<g >
<title>malloc (5,616,161,560 samples, 0.20%)</title><rect x="262.4" y="1989" width="2.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="265.42" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (647,292,922,820 samples, 23.27%)</title><rect x="830.1" y="2005" width="274.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="833.08" y="2015.5" >std::vector&lt;std::vector&lt;std::variant..</text>
</g>
<g >
<title>[libgomp.so.1.0.0] (1,262,141,401,520 samples, 45.37%)</title><rect x="294.7" y="2005" width="535.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="297.66" y="2015.5" >[libgomp.so.1.0.0]</text>
</g>
<g >
<title>duckdb::ContainsGeneric (272,727,270 samples, 0.01%)</title><rect x="1105.3" y="2037" width="0.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1108.25" y="2047.5" ></text>
</g>
<g >
<title>operator new (424,242,420 samples, 0.02%)</title><rect x="289.9" y="2005" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="292.86" y="2015.5" ></text>
</g>
<g >
<title>_int_free (2,757,575,730 samples, 0.10%)</title><rect x="229.9" y="1989" width="1.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="232.91" y="1999.5" ></text>
</g>
<g >
<title>void duckdb::TupleDataTemplatedGather&lt;int&gt; (252,525,250 samples, 0.01%)</title><rect x="1189.4" y="2037" width="0.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="1192.43" y="2047.5" ></text>
</g>
<g >
<title>duckdb::HashJoinOperatorState::~HashJoinOperatorState (4,616,161,570 samples, 0.17%)</title><rect x="235.0" y="2021" width="1.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="237.98" y="2031.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,898,989,870 samples, 0.10%)</title><rect x="253.4" y="2005" width="1.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="256.42" y="2015.5" ></text>
</g>
<g >
<title>_int_malloc (313,131,310 samples, 0.01%)</title><rect x="62.5" y="1973" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="65.54" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (1,656,565,640 samples, 0.06%)</title><rect x="286.9" y="2005" width="0.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="289.89" y="2015.5" ></text>
</g>
<g >
<title>malloc (1,464,646,450 samples, 0.05%)</title><rect x="178.4" y="1957" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="181.39" y="1967.5" ></text>
</g>
<g >
<title>Table::from_columnar (31,878,787,560 samples, 1.15%)</title><rect x="14.0" y="2037" width="13.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="17.04" y="2047.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (1,060,606,050 samples, 0.04%)</title><rect x="243.7" y="1973" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="246.68" y="1983.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (454,545,450 samples, 0.02%)</title><rect x="28.2" y="2005" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="31.17" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="1045" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1055.5" ></text>
</g>
<g >
<title>malloc (262,626,260 samples, 0.01%)</title><rect x="165.3" y="1989" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="168.27" y="1999.5" ></text>
</g>
<g >
<title>malloc (53,575,757,040 samples, 1.93%)</title><rect x="130.4" y="1989" width="22.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="133.41" y="1999.5" >m..</text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1253" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1263.5" ></text>
</g>
<g >
<title>_int_malloc (4,232,323,190 samples, 0.15%)</title><rect x="1167.4" y="1989" width="1.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1170.39" y="1999.5" ></text>
</g>
<g >
<title>void duckdb::TupleDataTemplatedScatter&lt;duckdb::string_t&gt; (454,545,450 samples, 0.02%)</title><rect x="1189.5" y="2037" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1192.54" y="2047.5" ></text>
</g>
<g >
<title>Table::from_columnar (1,121,212,110 samples, 0.04%)</title><rect x="179.1" y="1973" width="0.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="182.09" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (1,585,858,570 samples, 0.06%)</title><rect x="237.5" y="2005" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="240.45" y="2015.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (3,242,424,210 samples, 0.12%)</title><rect x="270.0" y="1989" width="1.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="273.05" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (252,525,250 samples, 0.01%)</title><rect x="294.5" y="2021" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="297.54" y="2031.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (5,333,333,280 samples, 0.19%)</title><rect x="284.2" y="1941" width="2.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="287.23" y="1951.5" ></text>
</g>
<g >
<title>malloc (838,383,830 samples, 0.03%)</title><rect x="62.3" y="1989" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="65.32" y="1999.5" ></text>
</g>
<g >
<title>operator new (535,353,530 samples, 0.02%)</title><rect x="209.8" y="1989" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="212.75" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1285" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1295.5" ></text>
</g>
<g >
<title>duckdb::VectorOperations::Hash (1,525,252,510 samples, 0.05%)</title><rect x="1110.4" y="2037" width="0.6" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1113.38" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="1013" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1023.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; (818,181,810 samples, 0.03%)</title><rect x="220.9" y="2005" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="223.88" y="2015.5" ></text>
</g>
<g >
<title>Comparison::like_match (383,838,380 samples, 0.01%)</title><rect x="28.0" y="2021" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="30.98" y="2031.5" ></text>
</g>
<g >
<title>__memmove_avx512_unaligned_erms (3,515,151,480 samples, 0.13%)</title><rect x="221.6" y="2021" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="224.63" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (848,484,840 samples, 0.03%)</title><rect x="179.7" y="1717" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1727.5" ></text>
</g>
<g >
<title>malloc (474,747,470 samples, 0.02%)</title><rect x="184.1" y="1957" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="187.08" y="1967.5" ></text>
</g>
<g >
<title>Contest::execute_scan[abi:cxx11] (2,676,767,650 samples, 0.10%)</title><rect x="173.4" y="1989" width="1.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="176.43" y="1999.5" ></text>
</g>
<g >
<title>malloc@plt (282,828,280 samples, 0.01%)</title><rect x="14.8" y="2021" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="17.76" y="2031.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::BufferAllocatorFree (272,727,270 samples, 0.01%)</title><rect x="238.3" y="2021" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="241.30" y="2031.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (474,747,470 samples, 0.02%)</title><rect x="183.5" y="1925" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="186.48" y="1935.5" ></text>
</g>
<g >
<title>operator new (18,808,080,620 samples, 0.68%)</title><rect x="1161.2" y="2021" width="8.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1164.23" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (16,545,454,380 samples, 0.59%)</title><rect x="1169.9" y="2037" width="7.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1172.85" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="709" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="719.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (252,525,250 samples, 0.01%)</title><rect x="209.9" y="1925" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="212.86" y="1935.5" ></text>
</g>
<g >
<title>void duckdb::FilterSelectionSwitch&lt;int&gt; (3,848,484,810 samples, 0.14%)</title><rect x="1187.6" y="2037" width="1.6" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1190.56" y="2047.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (7,222,222,150 samples, 0.26%)</title><rect x="216.9" y="1989" width="3.0" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="219.88" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="373" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="383.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (1,040,404,030 samples, 0.04%)</title><rect x="188.6" y="1941" width="0.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="191.60" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="949" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="959.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (1,353,535,340 samples, 0.05%)</title><rect x="220.0" y="1957" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="223.03" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (686,868,680 samples, 0.02%)</title><rect x="179.7" y="85" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.68" y="95.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::CreateStandardVector (262,626,260 samples, 0.01%)</title><rect x="244.7" y="2021" width="0.1" height="15.0" fill="rgb(235,142,33)" rx="2" ry="2" />
<text  x="247.68" y="2031.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1,363,636,350 samples, 0.05%)</title><rect x="164.7" y="1989" width="0.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="167.69" y="1999.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (414,141,410 samples, 0.01%)</title><rect x="62.1" y="1989" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="65.14" y="1999.5" ></text>
</g>
<g >
<title>malloc (252,525,250 samples, 0.01%)</title><rect x="244.7" y="1989" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="247.68" y="1999.5" ></text>
</g>
<g >
<title>duckdb::JoinHashTable::InsertHashes (3,585,858,550 samples, 0.13%)</title><rect x="238.6" y="1957" width="1.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="241.62" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (1,313,131,300 samples, 0.05%)</title><rect x="179.6" y="1941" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.64" y="1951.5" ></text>
</g>
<g >
<title>TableParser&lt;Table::from_csv (757,575,750 samples, 0.03%)</title><rect x="27.7" y="2037" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="30.66" y="2047.5" ></text>
</g>
<g >
<title>compare (3,383,838,350 samples, 0.12%)</title><rect x="196.2" y="2005" width="1.5" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="199.22" y="2015.5" ></text>
</g>
<g >
<title>Table::from_columnar (252,525,250 samples, 0.01%)</title><rect x="294.5" y="2005" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="297.54" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt;, std::allocator&lt;std::variant&lt;int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::monostate&gt; &gt; &gt; &gt; &gt; Contest::hash_join_omp&lt;int&gt; (16,656,565,490 samples, 0.60%)</title><rect x="213.5" y="2005" width="7.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="216.54" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (797,979,790 samples, 0.03%)</title><rect x="179.7" y="1493" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1503.5" ></text>
</g>
<g >
<title>_int_free (33,919,191,580 samples, 1.22%)</title><rect x="272.4" y="1989" width="14.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="275.35" y="1999.5" ></text>
</g>
<g >
<title>malloc (18,545,454,360 samples, 0.67%)</title><rect x="1161.3" y="2005" width="7.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1164.35" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="341" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="351.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="469" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="479.5" ></text>
</g>
<g >
<title>malloc (656,565,650 samples, 0.02%)</title><rect x="232.7" y="1989" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="235.68" y="1999.5" ></text>
</g>
<g >
<title>InnerColumn&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~InnerColumn (545,454,540 samples, 0.02%)</title><rect x="62.7" y="2021" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="65.70" y="2031.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (343,434,340 samples, 0.01%)</title><rect x="154.2" y="1989" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="157.22" y="1999.5" ></text>
</g>
<g >
<title>_int_malloc (16,696,969,530 samples, 0.60%)</title><rect x="20.3" y="1989" width="7.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="23.35" y="1999.5" ></text>
</g>
<g >
<title>_int_malloc (2,252,525,230 samples, 0.08%)</title><rect x="263.8" y="1973" width="1.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="266.81" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (797,979,790 samples, 0.03%)</title><rect x="179.7" y="1461" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1471.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (272,727,270 samples, 0.01%)</title><rect x="188.9" y="1909" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="191.91" y="1919.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (1,353,535,340 samples, 0.05%)</title><rect x="220.0" y="1973" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="223.03" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1157" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1167.5" ></text>
</g>
<g >
<title>memcpy@plt (272,727,270 samples, 0.01%)</title><rect x="1112.0" y="2037" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1114.96" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="1061" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1071.5" ></text>
</g>
<g >
<title>operator delete (5,323,232,270 samples, 0.19%)</title><rect x="248.2" y="2021" width="2.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="251.24" y="2031.5" ></text>
</g>
<g >
<title>re2::DFA::AnalyzeSearch (828,282,820 samples, 0.03%)</title><rect x="200.1" y="2005" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="203.13" y="2015.5" ></text>
</g>
<g >
<title>malloc (464,646,460 samples, 0.02%)</title><rect x="129.5" y="2005" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="132.52" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="405" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="415.5" ></text>
</g>
<g >
<title>duckdb::ConcurrentQueue::DequeueFromProducer (292,929,290 samples, 0.01%)</title><rect x="233.7" y="2021" width="0.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="236.71" y="2031.5" ></text>
</g>
<g >
<title>__memmove_avx512_unaligned_erms (4,323,232,280 samples, 0.16%)</title><rect x="292.3" y="2037" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="295.32" y="2047.5" ></text>
</g>
<g >
<title>bool re2::DFA::InlinedSearchLoop&lt;false, false, true&gt; (12,737,373,610 samples, 0.46%)</title><rect x="223.7" y="2021" width="5.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="226.74" y="2031.5" ></text>
</g>
<g >
<title>_int_free (6,868,686,800 samples, 0.25%)</title><rect x="217.0" y="1973" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="220.03" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1173" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (565,656,560 samples, 0.02%)</title><rect x="179.7" y="53" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.69" y="63.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (696,969,690 samples, 0.03%)</title><rect x="201.0" y="1957" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="203.99" y="1967.5" ></text>
</g>
<g >
<title>duckdb::HashBytes (494,949,490 samples, 0.02%)</title><rect x="234.8" y="2021" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="237.75" y="2031.5" ></text>
</g>
<g >
<title>Contest::execute (515,151,510 samples, 0.02%)</title><rect x="28.1" y="2021" width="0.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="31.14" y="2031.5" ></text>
</g>
<g >
<title>duckdb::JoinHashTable::Finalize (3,909,090,870 samples, 0.14%)</title><rect x="238.5" y="1973" width="1.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="241.49" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (777,777,770 samples, 0.03%)</title><rect x="179.7" y="1301" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1311.5" ></text>
</g>
<g >
<title>malloc_consolidate (1,838,383,820 samples, 0.07%)</title><rect x="230.3" y="1957" width="0.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="233.29" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="245" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (6,818,181,750 samples, 0.25%)</title><rect x="170.0" y="1957" width="2.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="173.03" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (474,747,470 samples, 0.02%)</title><rect x="179.7" y="37" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.69" y="47.5" ></text>
</g>
<g >
<title>memcmp@plt (343,434,340 samples, 0.01%)</title><rect x="1111.8" y="2037" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1114.82" y="2047.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (878,787,870 samples, 0.03%)</title><rect x="61.7" y="1957" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="64.74" y="1967.5" ></text>
</g>
<g >
<title>_int_free (85,939,393,080 samples, 3.09%)</title><rect x="92.8" y="1989" width="36.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="95.75" y="1999.5" >_in..</text>
</g>
<g >
<title>__memcmp_evex_movbe (4,353,535,310 samples, 0.16%)</title><rect x="189.6" y="2005" width="1.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="192.60" y="2015.5" ></text>
</g>
<g >
<title>duckdb::Value::Value (292,929,290 samples, 0.01%)</title><rect x="198.9" y="2005" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="201.91" y="2015.5" ></text>
</g>
<g >
<title>duckdb::FSSTStorage::FetchStringPointer (454,545,450 samples, 0.02%)</title><rect x="1105.7" y="2037" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1108.73" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="853" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="863.5" ></text>
</g>
<g >
<title>[unknown] (767,676,760 samples, 0.03%)</title><rect x="179.7" y="1269" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="837" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="847.5" ></text>
</g>
<g >
<title>[unknown] (505,050,500 samples, 0.02%)</title><rect x="233.2" y="2005" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="236.20" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (797,979,790 samples, 0.03%)</title><rect x="179.7" y="1429" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1439.5" ></text>
</g>
<g >
<title>[unknown] (838,383,830 samples, 0.03%)</title><rect x="179.7" y="1701" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (797,979,790 samples, 0.03%)</title><rect x="179.7" y="1557" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="501" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="511.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="741" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="751.5" ></text>
</g>
<g >
<title>duckdb::JoinHashTable::ScanStructure::ConstructMarkJoinResult (797,979,790 samples, 0.03%)</title><rect x="1107.7" y="2037" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1110.72" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (787,878,780 samples, 0.03%)</title><rect x="179.7" y="1413" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="1423.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (696,969,690 samples, 0.03%)</title><rect x="201.0" y="1989" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="203.99" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (808,080,800 samples, 0.03%)</title><rect x="179.7" y="1621" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.66" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (2,424,242,400 samples, 0.09%)</title><rect x="179.6" y="1973" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.56" y="1983.5" ></text>
</g>
<g >
<title>re2::DFA::AnalyzeSearchHelper (1,191,919,180 samples, 0.04%)</title><rect x="200.5" y="2005" width="0.5" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="203.48" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (747,474,740 samples, 0.03%)</title><rect x="179.7" y="149" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="159.5" ></text>
</g>
<g >
<title>operator new (29,888,888,590 samples, 1.07%)</title><rect x="14.9" y="2021" width="12.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="17.88" y="2031.5" ></text>
</g>
<g >
<title>void duckdb::RLESelect&lt;int&gt; (1,262,626,250 samples, 0.05%)</title><rect x="237.6" y="1989" width="0.5" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="240.59" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (757,575,750 samples, 0.03%)</title><rect x="179.7" y="629" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="182.67" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@@GLIBC_2.34 (252,525,250 samples, 0.01%)</title><rect x="247.2" y="2005" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="250.24" y="2015.5" ></text>
</g>
<g >
<title>malloc (252,525,250 samples, 0.01%)</title><rect x="161.0" y="1973" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="164.01" y="1983.5" ></text>
</g>
<g >
<title>malloc_consolidate (242,424,240 samples, 0.01%)</title><rect x="180.2" y="1877" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="183.24" y="1887.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,101,010,080 samples, 0.08%)</title><rect x="260.3" y="2021" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="263.30" y="2031.5" ></text>
</g>
<g >
<title>operator new (474,747,470 samples, 0.02%)</title><rect x="179.4" y="1957" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="182.36" y="1967.5" ></text>
</g>
<g >
<title>CSVParser::execute (4,313,131,270 samples, 0.16%)</title><rect x="10.1" y="2037" width="1.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="13.09" y="2047.5" ></text>
</g>
</g>
</svg>
